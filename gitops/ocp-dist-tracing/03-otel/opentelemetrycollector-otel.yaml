---
kind: OpenTelemetryCollector
apiVersion: opentelemetry.io/v1beta1
metadata:
  name: otel
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    sidecar.istio.io/inject: 'true'
spec:
  mode: deployment
  observability:
    metrics:
      enableMetrics: true 
  config:
    extensions:
      bearertokenauth:
        filename: /var/run/secrets/kubernetes.io/serviceaccount/token
    receivers:
      otlp/grpc:
        protocols:
          grpc: {}
      otlp/http:
        protocols:
          http: {}
    # # Data sources: metrics
    #   prometheus:
    #     config:
    #       scrape_configs:
    #         - job_name: otel-collector
    #           scrape_interval: 5s
    #           static_configs:
    #             - targets: [localhost:8888]
    exporters:
      # https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/debugexporter/README.md
      debug:
        verbosity: normal # basic / normal / detailed

      # GRPC exporter to Tempo
      otlp:
        endpoint: tempo-tempo-gateway.openshift-tempo.svc.cluster.local:8090
        tls:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        auth:
          authenticator: bearertokenauth
        headers:
          X-Scope-OrgID: dev  # tenantName

      # HTTP exporter to Tempo
      otlphttp: 
        endpoint: https://tempo-tempo-gateway.openshift-tempo.svc.cluster.local:8080/api/traces/v1/dev
        tls:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        auth:
          authenticator: bearertokenauth
        headers:
          X-Scope-OrgID: dev  # tenantName
      
      # prometheus:
      #   add_metric_suffixes: false
      #   endpoint: 0.0.0.0:8889
      #   resource_to_telemetry_conversion:
      #     enabled: true # by default resource attributes are dropped

    # connectors:
    #   spanmetrics: 
    #     metrics_flush_interval: 15s

    service:
      extensions:
        - bearertokenauth
      pipelines:
        # metrics:
        #   exporters:
        #     - prometheus
        #   receivers: []
        #     # - spanmetrics
        traces/grpc:
          receivers:
            - otlp/grpc
          exporters:
            - otlp
            # - spanmetrics
            # - debug
        traces/http:
          receivers:
            - otlp/http
          exporters:
            - otlphttp
            # - spanmetrics
            # - debug
      telemetry:
        # logs: # Getting the OpenTelemetry Collector logs
        #   level: debug
        metrics: # Exposing the metrics
          address: ":8888"
